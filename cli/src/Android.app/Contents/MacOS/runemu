#!/bin/bash

# set color
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced
COL_NC='\033[0m' # No Color
COL_LIGHT_YELLOW='\033[1;33m'
INFO="[${COL_LIGHT_YELLOW}~${COL_NC}]"
OVER="\r\033[K"
printf "\033[H\033[2J" # 清理屏幕
# set msg
msg_info() {
    printf "  ${INFO}  %s ${COL_LIGHT_YELLOW}...${COL_NC}" "${1}" 1>&2
}

msg_over() {
    printf "${OVER}%s" "" 1>&2
}
msg_last() {
    for ((i = 1; i <= ${1}; i++)); do
        printf "\r\033[1A%s" "" 1>&2
        printf "\r\033[K%s" "" 1>&2
    done
}

msg_ok() {
    printf "${OVER}  [\033[1;32m✓${COL_NC}]  %s\n" "${1}" 1>&2
    msg_over
}

msg_err() {
    printf "${OVER}  [\033[1;31m✗${COL_NC}]  %s\n" "${1}" 1>&2
    exit 1
}

_exit_handler() {
    if [ $? -eq 0 ]; then exit 0; fi
    title=$(echo $0 | awk -F '/' '{print $3}')
    message="运行失败: $(cat tmp/error.log)"
    rm -rf tmp
    osascript -e "display notification \"$message\" with title \"$title\" sound name \"Glass\""
    exit 1
}

trap _exit_handler EXIT

cd "${0%/*}" || exit 1

msg_info 正在初始化资源文件
echo
find "${PWD}" -name ".DS_Store" -exec rm "{}" \;
export ANDROID_SDK_ROOT="${HOME}/Library/Android/sdk"
export PATH="${PATH}:${ANDROID_SDK_ROOT}/platform-tools"
ANDROID_HOME="$(pwd)"
export ANDROID_HOME
export ANDROID_AVD_HOME="${ANDROID_HOME}/avd"
ANDROID_EMULATOR_LAUNCHER_DIR="${ANDROID_SDK_ROOT}/emulator"
if [ ! -d "${ANDROID_SDK_ROOT}" ]; then mkdir -p "${ANDROID_SDK_ROOT}"; fi
if [ ! -d "tmp" ]; then mkdir tmp; fi
if [ ! -d "${ANDROID_SDK_ROOT}/emulator" ]; then
    if [ ! -e "tmp/emulator.zip" ]; then
        curl -kfsSL https://dl.google.com/android/repository/emulator-darwin_aarch64-10696886.zip -o tmp/emulator.zip 2>tmp/error.log || {
            rm -f tmp/emulator.zip
            exit 1
        }
    fi
    unzip -q "tmp/emulator.zip" -d "${ANDROID_SDK_ROOT}" 2>tmp/error.log || {
        rm -rf "${ANDROID_SDK_ROOT}/emulator"
        exit 1
    }
fi
if [ ! -d "${ANDROID_SDK_ROOT}/platform-tools" ]; then
    if [ ! -e "tmp/platform-tools.zip" ]; then
        curl -kfsSL https://dl.google.com/android/repository/platform-tools_r34.0.4-darwin.zip -o tmp/platform-tools.zip 2>tmp/error.log || {
            rm -f tmp/platform-tools.zip
            exit 1
        }
    fi
    unzip -q "tmp/platform-tools.zip" -d "${ANDROID_SDK_ROOT}" 2>tmp/error.log || {
        rm -rf "${ANDROID_SDK_ROOT}/platform-tools"
        exit 1
    }
fi

#if [ ! -d "${ANDROID_SDK_ROOT}/skins" ]; then
#    cp -r "${ANDROID_HOME}/skins" "${ANDROID_SDK_ROOT}/" # TODO
#else
#    if [ ! -d "${ANDROID_SDK_ROOT}/skins/pixel_4_xl" ]; then
#        cp -r "${ANDROID_HOME}/skins/pixel_4_xl" "${ANDROID_SDK_ROOT}/skins/" # TODO
#    fi
#fi
if [ ! -d "${ANDROID_SDK_ROOT}/platforms" ]; then
    mkdir "${ANDROID_SDK_ROOT}/platforms"
fi
if [ ! -d "${ANDROID_SDK_ROOT}/platforms" ]; then
    mkdir "${ANDROID_SDK_ROOT}/platforms"
fi

system_images=system_images
system_images_url=system_images_url
system_images_path=system_images_path
if [ ! -d "${ANDROID_SDK_ROOT}/${system_images_path%/*}" ]; then
    if [ ! -e "tmp/${system_images}.zip" ]; then
        curl -kfsSL "${system_images_url}" -o "tmp/${system_images}.zip" 2>tmp/error.log || {
            rm -f "tmp/${system_images}.zip"
            exit 1
        }
    fi
    mkdir -p "${ANDROID_SDK_ROOT}/${system_images_path%/*}"
    # shellcheck disable=SC2115
    unzip -q "tmp/${system_images}.zip" -d "${ANDROID_SDK_ROOT}/${system_images_path%/*}" 2>tmp/error.log || {
        rm -rf "${ANDROID_SDK_ROOT}/${system_images_path%/*}"
        exit 1
    }
fi
if [ -d "tmp" ]; then rm -rf tmp; fi
msg_ok 初始化完成!

"${ANDROID_EMULATOR_LAUNCHER_DIR}/emulator" \
-dns-server 8.8.8.8,114.114.114.114 \
-avd Android \
-no-snapshot \
-no-boot-anim \
-no-snapstorage \
-netdelay none \
-netspeed full
